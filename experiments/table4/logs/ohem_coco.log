2023/06/14 04:56:26 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 | packaged by conda-forge | (default, Feb  1 2023, 16:01:55) [GCC 11.3.0]
    CUDA available: True
    numpy_random_seed: 1870131713
    GPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-16GB
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.6, V11.6.55
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.1+cu117
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2+cu117
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1870131713
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/14 04:56:27 - mmengine - INFO - Config:
model = dict(
    type='FasterRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_size_divisor=32),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='OHEMSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = 'data/coco/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    dataset=dict(
        type='CocoDataset',
        data_root='data/coco/',
        ann_file='annotations/instances_train2017.json',
        data_prefix=dict(img='train2017/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/coco/',
        ann_file='annotations/instances_val2017.json',
        data_prefix=dict(img='val2017/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/coco/',
        ann_file='annotations/instances_val2017.json',
        data_prefix=dict(img='val2017/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='data/coco/annotations/instances_val2017.json',
    metric='bbox',
    format_only=False,
    backend_args=None)
test_evaluator = dict(
    type='CocoMetric',
    ann_file='data/coco/annotations/instances_val2017.json',
    metric='bbox',
    format_only=False,
    backend_args=None)
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=12, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=0.001, by_epoch=False, begin=0, end=500),
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[8, 11],
        gamma=0.1)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001))
auto_scale_lr = dict(enable=False, base_batch_size=16)
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = '/home/ubuntu/workspace/mmdetection/work_dirs/faster-rcnn_r50_fpn_ohem_1x_coco/epoch_12.pth'
resume = False
launcher = 'none'
work_dir = './work_dirs/faster-rcnn_r50_fpn_ohem_1x_coco'

2023/06/14 04:56:30 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/14 04:56:30 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/14 04:56:33 - mmengine - WARNING - The prefix is not set in metric class DumpDetResults.
2023/06/14 04:56:35 - mmengine - INFO - Load checkpoint from /home/ubuntu/workspace/mmdetection/work_dirs/faster-rcnn_r50_fpn_ohem_1x_coco/epoch_12.pth
2023/06/14 04:56:40 - mmengine - INFO - Epoch(test) [  50/5000]    eta: 0:07:23  time: 0.0895  data_time: 0.0044  memory: 526  
2023/06/14 04:56:42 - mmengine - INFO - Epoch(test) [ 100/5000]    eta: 0:05:33  time: 0.0464  data_time: 0.0022  memory: 517  
2023/06/14 04:56:44 - mmengine - INFO - Epoch(test) [ 150/5000]    eta: 0:04:57  time: 0.0482  data_time: 0.0023  memory: 526  
2023/06/14 04:56:47 - mmengine - INFO - Epoch(test) [ 200/5000]    eta: 0:04:35  time: 0.0454  data_time: 0.0022  memory: 511  
2023/06/14 04:56:49 - mmengine - INFO - Epoch(test) [ 250/5000]    eta: 0:04:22  time: 0.0472  data_time: 0.0022  memory: 517  
2023/06/14 04:56:51 - mmengine - INFO - Epoch(test) [ 300/5000]    eta: 0:04:12  time: 0.0460  data_time: 0.0022  memory: 517  
2023/06/14 04:56:54 - mmengine - INFO - Epoch(test) [ 350/5000]    eta: 0:04:04  time: 0.0456  data_time: 0.0022  memory: 508  
2023/06/14 04:56:56 - mmengine - INFO - Epoch(test) [ 400/5000]    eta: 0:03:58  time: 0.0462  data_time: 0.0022  memory: 526  
2023/06/14 04:56:58 - mmengine - INFO - Epoch(test) [ 450/5000]    eta: 0:03:52  time: 0.0458  data_time: 0.0021  memory: 508  
2023/06/14 04:57:00 - mmengine - INFO - Epoch(test) [ 500/5000]    eta: 0:03:47  time: 0.0449  data_time: 0.0022  memory: 517  
2023/06/14 04:57:03 - mmengine - INFO - Epoch(test) [ 550/5000]    eta: 0:03:43  time: 0.0462  data_time: 0.0023  memory: 526  
2023/06/14 04:57:05 - mmengine - INFO - Epoch(test) [ 600/5000]    eta: 0:03:38  time: 0.0441  data_time: 0.0022  memory: 526  
2023/06/14 04:57:07 - mmengine - INFO - Epoch(test) [ 650/5000]    eta: 0:03:34  time: 0.0451  data_time: 0.0022  memory: 511  
2023/06/14 04:57:09 - mmengine - INFO - Epoch(test) [ 700/5000]    eta: 0:03:30  time: 0.0459  data_time: 0.0023  memory: 526  
2023/06/14 04:57:12 - mmengine - INFO - Epoch(test) [ 750/5000]    eta: 0:03:27  time: 0.0445  data_time: 0.0023  memory: 511  
2023/06/14 04:57:14 - mmengine - INFO - Epoch(test) [ 800/5000]    eta: 0:03:23  time: 0.0436  data_time: 0.0022  memory: 526  
2023/06/14 04:57:16 - mmengine - INFO - Epoch(test) [ 850/5000]    eta: 0:03:20  time: 0.0448  data_time: 0.0022  memory: 517  
2023/06/14 04:57:18 - mmengine - INFO - Epoch(test) [ 900/5000]    eta: 0:03:16  time: 0.0438  data_time: 0.0022  memory: 511  
2023/06/14 04:57:21 - mmengine - INFO - Epoch(test) [ 950/5000]    eta: 0:03:13  time: 0.0444  data_time: 0.0022  memory: 508  
2023/06/14 04:57:23 - mmengine - INFO - Epoch(test) [1000/5000]    eta: 0:03:10  time: 0.0445  data_time: 0.0021  memory: 511  
2023/06/14 04:57:25 - mmengine - INFO - Epoch(test) [1050/5000]    eta: 0:03:07  time: 0.0443  data_time: 0.0021  memory: 517  
2023/06/14 04:57:27 - mmengine - INFO - Epoch(test) [1100/5000]    eta: 0:03:04  time: 0.0451  data_time: 0.0022  memory: 526  
2023/06/14 04:57:29 - mmengine - INFO - Epoch(test) [1150/5000]    eta: 0:03:01  time: 0.0443  data_time: 0.0022  memory: 508  
2023/06/14 04:57:32 - mmengine - INFO - Epoch(test) [1200/5000]    eta: 0:02:58  time: 0.0443  data_time: 0.0022  memory: 526  
2023/06/14 04:57:34 - mmengine - INFO - Epoch(test) [1250/5000]    eta: 0:02:56  time: 0.0444  data_time: 0.0022  memory: 511  
2023/06/14 04:57:36 - mmengine - INFO - Epoch(test) [1300/5000]    eta: 0:02:53  time: 0.0442  data_time: 0.0022  memory: 526  
2023/06/14 04:57:38 - mmengine - INFO - Epoch(test) [1350/5000]    eta: 0:02:50  time: 0.0447  data_time: 0.0022  memory: 526  
2023/06/14 04:57:41 - mmengine - INFO - Epoch(test) [1400/5000]    eta: 0:02:48  time: 0.0446  data_time: 0.0022  memory: 517  
2023/06/14 04:57:43 - mmengine - INFO - Epoch(test) [1450/5000]    eta: 0:02:45  time: 0.0441  data_time: 0.0022  memory: 526  
2023/06/14 04:57:45 - mmengine - INFO - Epoch(test) [1500/5000]    eta: 0:02:42  time: 0.0450  data_time: 0.0022  memory: 508  
2023/06/14 04:57:47 - mmengine - INFO - Epoch(test) [1550/5000]    eta: 0:02:40  time: 0.0455  data_time: 0.0021  memory: 526  
2023/06/14 04:57:50 - mmengine - INFO - Epoch(test) [1600/5000]    eta: 0:02:37  time: 0.0444  data_time: 0.0022  memory: 517  
2023/06/14 04:57:52 - mmengine - INFO - Epoch(test) [1650/5000]    eta: 0:02:35  time: 0.0438  data_time: 0.0022  memory: 526  
2023/06/14 04:57:54 - mmengine - INFO - Epoch(test) [1700/5000]    eta: 0:02:32  time: 0.0435  data_time: 0.0021  memory: 511  
2023/06/14 04:57:56 - mmengine - INFO - Epoch(test) [1750/5000]    eta: 0:02:30  time: 0.0446  data_time: 0.0022  memory: 526  
2023/06/14 04:57:58 - mmengine - INFO - Epoch(test) [1800/5000]    eta: 0:02:27  time: 0.0442  data_time: 0.0022  memory: 511  
2023/06/14 04:58:01 - mmengine - INFO - Epoch(test) [1850/5000]    eta: 0:02:25  time: 0.0444  data_time: 0.0022  memory: 526  
2023/06/14 04:58:03 - mmengine - INFO - Epoch(test) [1900/5000]    eta: 0:02:22  time: 0.0445  data_time: 0.0023  memory: 526  
2023/06/14 04:58:05 - mmengine - INFO - Epoch(test) [1950/5000]    eta: 0:02:20  time: 0.0448  data_time: 0.0022  memory: 526  
2023/06/14 04:58:07 - mmengine - INFO - Epoch(test) [2000/5000]    eta: 0:02:18  time: 0.0450  data_time: 0.0022  memory: 526  
2023/06/14 04:58:10 - mmengine - INFO - Epoch(test) [2050/5000]    eta: 0:02:15  time: 0.0441  data_time: 0.0022  memory: 500  
2023/06/14 04:58:12 - mmengine - INFO - Epoch(test) [2100/5000]    eta: 0:02:13  time: 0.0438  data_time: 0.0021  memory: 517  
2023/06/14 04:58:14 - mmengine - INFO - Epoch(test) [2150/5000]    eta: 0:02:10  time: 0.0444  data_time: 0.0022  memory: 511  
2023/06/14 04:58:16 - mmengine - INFO - Epoch(test) [2200/5000]    eta: 0:02:08  time: 0.0436  data_time: 0.0021  memory: 511  
2023/06/14 04:58:18 - mmengine - INFO - Epoch(test) [2250/5000]    eta: 0:02:06  time: 0.0446  data_time: 0.0022  memory: 517  
2023/06/14 04:58:21 - mmengine - INFO - Epoch(test) [2300/5000]    eta: 0:02:03  time: 0.0453  data_time: 0.0022  memory: 495  
2023/06/14 04:58:23 - mmengine - INFO - Epoch(test) [2350/5000]    eta: 0:02:01  time: 0.0441  data_time: 0.0021  memory: 511  
2023/06/14 04:58:25 - mmengine - INFO - Epoch(test) [2400/5000]    eta: 0:01:58  time: 0.0444  data_time: 0.0022  memory: 517  
2023/06/14 04:58:27 - mmengine - INFO - Epoch(test) [2450/5000]    eta: 0:01:56  time: 0.0447  data_time: 0.0022  memory: 517  
2023/06/14 04:58:30 - mmengine - INFO - Epoch(test) [2500/5000]    eta: 0:01:54  time: 0.0440  data_time: 0.0022  memory: 526  
2023/06/14 04:58:32 - mmengine - INFO - Epoch(test) [2550/5000]    eta: 0:01:51  time: 0.0443  data_time: 0.0021  memory: 517  
2023/06/14 04:58:34 - mmengine - INFO - Epoch(test) [2600/5000]    eta: 0:01:49  time: 0.0446  data_time: 0.0022  memory: 526  
2023/06/14 04:58:36 - mmengine - INFO - Epoch(test) [2650/5000]    eta: 0:01:47  time: 0.0441  data_time: 0.0022  memory: 511  
2023/06/14 04:58:38 - mmengine - INFO - Epoch(test) [2700/5000]    eta: 0:01:44  time: 0.0447  data_time: 0.0022  memory: 526  
2023/06/14 04:58:41 - mmengine - INFO - Epoch(test) [2750/5000]    eta: 0:01:42  time: 0.0439  data_time: 0.0022  memory: 526  
2023/06/14 04:58:43 - mmengine - INFO - Epoch(test) [2800/5000]    eta: 0:01:40  time: 0.0444  data_time: 0.0022  memory: 526  
2023/06/14 04:58:45 - mmengine - INFO - Epoch(test) [2850/5000]    eta: 0:01:37  time: 0.0442  data_time: 0.0021  memory: 511  
2023/06/14 04:58:47 - mmengine - INFO - Epoch(test) [2900/5000]    eta: 0:01:35  time: 0.0458  data_time: 0.0022  memory: 526  
2023/06/14 04:58:50 - mmengine - INFO - Epoch(test) [2950/5000]    eta: 0:01:33  time: 0.0442  data_time: 0.0022  memory: 526  
2023/06/14 04:58:52 - mmengine - INFO - Epoch(test) [3000/5000]    eta: 0:01:30  time: 0.0442  data_time: 0.0022  memory: 517  
2023/06/14 04:58:54 - mmengine - INFO - Epoch(test) [3050/5000]    eta: 0:01:28  time: 0.0446  data_time: 0.0022  memory: 526  
2023/06/14 04:58:56 - mmengine - INFO - Epoch(test) [3100/5000]    eta: 0:01:26  time: 0.0449  data_time: 0.0022  memory: 526  
2023/06/14 04:58:58 - mmengine - INFO - Epoch(test) [3150/5000]    eta: 0:01:24  time: 0.0443  data_time: 0.0021  memory: 511  
2023/06/14 04:59:01 - mmengine - INFO - Epoch(test) [3200/5000]    eta: 0:01:21  time: 0.0444  data_time: 0.0021  memory: 526  
2023/06/14 04:59:03 - mmengine - INFO - Epoch(test) [3250/5000]    eta: 0:01:19  time: 0.0440  data_time: 0.0022  memory: 495  
2023/06/14 04:59:05 - mmengine - INFO - Epoch(test) [3300/5000]    eta: 0:01:17  time: 0.0439  data_time: 0.0021  memory: 526  
2023/06/14 04:59:07 - mmengine - INFO - Epoch(test) [3350/5000]    eta: 0:01:14  time: 0.0440  data_time: 0.0022  memory: 526  
2023/06/14 04:59:09 - mmengine - INFO - Epoch(test) [3400/5000]    eta: 0:01:12  time: 0.0441  data_time: 0.0022  memory: 511  
2023/06/14 04:59:12 - mmengine - INFO - Epoch(test) [3450/5000]    eta: 0:01:10  time: 0.0444  data_time: 0.0022  memory: 526  
2023/06/14 04:59:14 - mmengine - INFO - Epoch(test) [3500/5000]    eta: 0:01:07  time: 0.0445  data_time: 0.0021  memory: 526  
2023/06/14 04:59:16 - mmengine - INFO - Epoch(test) [3550/5000]    eta: 0:01:05  time: 0.0432  data_time: 0.0021  memory: 517  
2023/06/14 04:59:18 - mmengine - INFO - Epoch(test) [3600/5000]    eta: 0:01:03  time: 0.0444  data_time: 0.0022  memory: 517  
2023/06/14 04:59:21 - mmengine - INFO - Epoch(test) [3650/5000]    eta: 0:01:01  time: 0.0441  data_time: 0.0021  memory: 526  
2023/06/14 04:59:23 - mmengine - INFO - Epoch(test) [3700/5000]    eta: 0:00:58  time: 0.0440  data_time: 0.0022  memory: 495  
2023/06/14 04:59:25 - mmengine - INFO - Epoch(test) [3750/5000]    eta: 0:00:56  time: 0.0440  data_time: 0.0021  memory: 511  
2023/06/14 04:59:27 - mmengine - INFO - Epoch(test) [3800/5000]    eta: 0:00:54  time: 0.0441  data_time: 0.0021  memory: 517  
2023/06/14 04:59:29 - mmengine - INFO - Epoch(test) [3850/5000]    eta: 0:00:51  time: 0.0445  data_time: 0.0022  memory: 526  
2023/06/14 04:59:32 - mmengine - INFO - Epoch(test) [3900/5000]    eta: 0:00:49  time: 0.0441  data_time: 0.0021  memory: 511  
2023/06/14 04:59:34 - mmengine - INFO - Epoch(test) [3950/5000]    eta: 0:00:47  time: 0.0445  data_time: 0.0021  memory: 508  
2023/06/14 04:59:36 - mmengine - INFO - Epoch(test) [4000/5000]    eta: 0:00:45  time: 0.0437  data_time: 0.0022  memory: 500  
2023/06/14 04:59:38 - mmengine - INFO - Epoch(test) [4050/5000]    eta: 0:00:42  time: 0.0442  data_time: 0.0022  memory: 517  
2023/06/14 04:59:40 - mmengine - INFO - Epoch(test) [4100/5000]    eta: 0:00:40  time: 0.0440  data_time: 0.0021  memory: 526  
2023/06/14 04:59:43 - mmengine - INFO - Epoch(test) [4150/5000]    eta: 0:00:38  time: 0.0438  data_time: 0.0021  memory: 500  
2023/06/14 04:59:45 - mmengine - INFO - Epoch(test) [4200/5000]    eta: 0:00:36  time: 0.0440  data_time: 0.0021  memory: 508  
2023/06/14 04:59:47 - mmengine - INFO - Epoch(test) [4250/5000]    eta: 0:00:33  time: 0.0433  data_time: 0.0021  memory: 526  
2023/06/14 04:59:49 - mmengine - INFO - Epoch(test) [4300/5000]    eta: 0:00:31  time: 0.0442  data_time: 0.0022  memory: 508  
2023/06/14 04:59:51 - mmengine - INFO - Epoch(test) [4350/5000]    eta: 0:00:29  time: 0.0440  data_time: 0.0021  memory: 526  
2023/06/14 04:59:54 - mmengine - INFO - Epoch(test) [4400/5000]    eta: 0:00:27  time: 0.0442  data_time: 0.0022  memory: 511  
2023/06/14 04:59:56 - mmengine - INFO - Epoch(test) [4450/5000]    eta: 0:00:24  time: 0.0434  data_time: 0.0021  memory: 511  
2023/06/14 04:59:58 - mmengine - INFO - Epoch(test) [4500/5000]    eta: 0:00:22  time: 0.0435  data_time: 0.0021  memory: 517  
2023/06/14 05:00:00 - mmengine - INFO - Epoch(test) [4550/5000]    eta: 0:00:20  time: 0.0446  data_time: 0.0022  memory: 526  
2023/06/14 05:00:02 - mmengine - INFO - Epoch(test) [4600/5000]    eta: 0:00:18  time: 0.0445  data_time: 0.0023  memory: 511  
2023/06/14 05:00:05 - mmengine - INFO - Epoch(test) [4650/5000]    eta: 0:00:15  time: 0.0443  data_time: 0.0022  memory: 495  
2023/06/14 05:00:07 - mmengine - INFO - Epoch(test) [4700/5000]    eta: 0:00:13  time: 0.0447  data_time: 0.0022  memory: 517  
2023/06/14 05:00:09 - mmengine - INFO - Epoch(test) [4750/5000]    eta: 0:00:11  time: 0.0433  data_time: 0.0021  memory: 511  
2023/06/14 05:00:11 - mmengine - INFO - Epoch(test) [4800/5000]    eta: 0:00:08  time: 0.0437  data_time: 0.0022  memory: 526  
2023/06/14 05:00:13 - mmengine - INFO - Epoch(test) [4850/5000]    eta: 0:00:06  time: 0.0441  data_time: 0.0021  memory: 526  
2023/06/14 05:00:16 - mmengine - INFO - Epoch(test) [4900/5000]    eta: 0:00:04  time: 0.0453  data_time: 0.0022  memory: 517  
2023/06/14 05:00:18 - mmengine - INFO - Epoch(test) [4950/5000]    eta: 0:00:02  time: 0.0441  data_time: 0.0022  memory: 526  
2023/06/14 05:00:20 - mmengine - INFO - Epoch(test) [5000/5000]    eta: 0:00:00  time: 0.0448  data_time: 0.0021  memory: 526  
2023/06/14 05:00:23 - mmengine - INFO - Evaluating bbox...
2023/06/14 05:00:58 - mmengine - INFO - bbox_mAP_copypaste: 0.377 0.585 0.412 0.219 0.411 0.489
2023/06/14 05:01:00 - mmengine - INFO - Results has been saved to results.pkl.
2023/06/14 05:01:00 - mmengine - INFO - Epoch(test) [5000/5000]    coco/bbox_mAP: 0.3770  coco/bbox_mAP_50: 0.5850  coco/bbox_mAP_75: 0.4120  coco/bbox_mAP_s: 0.2190  coco/bbox_mAP_m: 0.4110  coco/bbox_mAP_l: 0.4890  data_time: 0.0022  time: 0.0449
